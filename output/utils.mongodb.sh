# ##############################################################################
# Author:       jmrenouard/jean-Marie Renouard
# Email:        jmrenouard@lightpath.fr
#
# Description:
#   This script provides a set of utility functions and aliases to simplify
#   the administration of MongoDB instances. It is inspired by a similar
#   script for PostgreSQL and offers functionalities for checking status,
#   displaying information, managing databases, performing backups/restores,
#   and handling users.
#
# Usage:
#   source utils.mongodb.sh
#
# Examples:
#   # Example 1: Check the status of all configured MongoDB instances.
#   mongo_status
#
#   # Example 2: List all databases on a specific MongoDB instance.
#   mongo_dbs "mongodb://localhost:27017"
#
#   # Example 3: Back up a database.
#   mongo_backup "mongodb://localhost:27017" "my_app_db" "/opt/backups"
# ##############################################################################
#!/bin/bash
# ==============================================================================
#
#          MongoDB Management Utility Script
#
# Author:         Generated by Gemini for Jean-Marie Renouard
# Version:        1.0
# Description:    This script provides a set of functions and aliases to
#                 simplify the administration of MongoDB instances.
#                 It is inspired by an equivalent script for PostgreSQL.
#
# Prerequisites:  - mongosh (the new MongoDB shell)
#                 - MongoDB Database Tools (mongodump, mongorestore)
#                 - jq (for JSON parsing, highly recommended)
#
# Usage:          Source this script in your .bashrc or .bash_profile:
#                 source /path/to/mongo_utils.sh
#
# ==============================================================================

# --- Configuration ---
# Define your MongoDB connection URIs here.
# Separate URIs with spaces.
# For replica sets, a single URI pointing to one member is sufficient.
# Example: MONGO_URIS="mongodb://user:pass@host1:27017/admin mongodb://host2:27018"
# For this example, we use local instances without authentication.
export MONGO_URIS="mongodb://localhost:27017"

# Custom names for instances (optional)
# The key is generated by replacing '://' with '_' and ':' with '_'.
# export INSTANCE_NAME_mongodb_localhost_27017="primary_mongo"

_DIR="$(dirname "$(readlink -f "$0")")"
# If you have a utils.sh file, you can source it here
source $_DIR/utils.sh

# --- Internal Utility Functions ---

# # ------------------------------------------------------------------------------
# # Description:
# #   Displays an error message in red. This function is a local override of the
# #   one in utils.sh to provide colored output.
# #
# # Arguments:
# #   $1 - The error message to display.
# #
# # Outputs:
# #   - Writes the formatted error message to stdout.
# # ------------------------------------------------------------------------------
# error() { echo -e "\033[0;31m[ERROR] $1\033[0m"; }

# # ------------------------------------------------------------------------------
# # Description:
# #   Displays a success message in green. This function is a local override of the
# #   one in utils.sh to provide colored output.
# #
# # Arguments:
# #   $1 - The success message to display.
# #
# # Outputs:
# #   - Writes the formatted success message to stdout.
# # ------------------------------------------------------------------------------
# ok() { echo -e "\033[0;32m[OK] $1\033[0m"; }

# # ------------------------------------------------------------------------------
# # Description:
# #   Displays an informational message in yellow. This function is a local override
# #   of the one in utils.sh to provide colored output.
# #
# # Arguments:
# #   $1 - The informational message to display.
# #
# # Outputs:
# #   - Writes the formatted info message to stdout.
# # ------------------------------------------------------------------------------
# info() { echo -e "\033[0;33m[INFO] $1\033[0m"; }

# # ------------------------------------------------------------------------------
# # Description:
# #   Displays a title for sectioning output.
# #
# # Arguments:
# #   $1 - The title text.
# #
# # Outputs:
# #   - Writes the formatted title to stdout.
# # ------------------------------------------------------------------------------
# title() { echo -e "\n\033[1;34m--- $1 ---\033[0m"; }

# ------------------------------------------------------------------------------
# Description:
#   An internal helper function to parse a MongoDB URI and return the host and port.
#
# Arguments:
#   $1 - The MongoDB URI string.
#
# Outputs:
#   - Writes the host:port part of the URI to stdout.
# ------------------------------------------------------------------------------
_mongo_get_host_port_from_uri() {
    local uri=$1
    # Extracts the host:port part of the URI
    echo $uri | sed -E 's/mongodb:\/\/(.*@)?([^/]+).*/\2/'
}

# --- Aliases ---
alias msh='mongosh'
alias l='ls -lsh'
alias lh='ls -lsht'
alias la='ls -lsha'
alias ii='mongo_info'
alias lport='netstat -ltnp | grep mongo'

# --- Main Functions ---

# ------------------------------------------------------------------------------
# Description:
#   Checks the status of each configured MongoDB instance by sending a ping command.
#
# Arguments:
#   None
#
# Outputs:
#   - Writes the status of each instance to stdout.
#   - Returns 0 if all instances are reachable, 1 otherwise.
# ------------------------------------------------------------------------------
mongo_status() {
    local lRC=0
    info "Checking status of MongoDB instances..."
    for uri in $MONGO_URIS; do
        host_port=$(_mongo_get_host_port_from_uri $uri)
        mongosh "$uri" --eval "db.adminCommand({ping: 1})" --quiet &>/dev/null
        lRC=$?
        if [ $lRC -eq 0 ]; then
            ok "MongoDB server on '$host_port' is running and accepts connections."
        else
            error "MongoDB server on '$host_port' is stopped or inaccessible."
            return 1
        fi
    done
    return 0
}

# ------------------------------------------------------------------------------
# Description:
#   Lists the names of the configured MongoDB instances. It uses a custom name
#   if defined, otherwise defaults to the host:port.
#
# Arguments:
#   None
#
# Outputs:
#   - Writes the list of instance names to stdout, one per line.
# ------------------------------------------------------------------------------
mongo_instances() {
    for uri in $MONGO_URIS; do
        host_port=$(_mongo_get_host_port_from_uri $uri)
        # Use a custom name if it exists, otherwise the host:port
        key="INSTANCE_NAME_$(echo $uri | sed 's|://|_|g' | sed 's|:|_|g')"
        eval "name=\$$key"
        if [ -n "$name" ]; then
            echo $name
        else
            echo $host_port
        fi
    done
}

# ------------------------------------------------------------------------------
# Description:
#   Displays detailed information about each MongoDB instance in a table format.
#   Requires `jq` for robust JSON parsing.
#
# Arguments:
#   None
#
# Outputs:
#   - Writes a formatted table with instance details to stdout.
# ------------------------------------------------------------------------------
mongo_info() {
(
    echo -e "INSTANCE\tVERSION\tPROCESSUS\tHOST\tUPTIME\tROLE\tREPL_SET\tDB_PATH\tSTATUS"
    for uri in $MONGO_URIS; do
        host_port=$(_mongo_get_host_port_from_uri $uri)

        # Fetch data in a single command for efficiency
        json_data=$(mongosh "$uri" --quiet --eval "JSON.stringify({
            serverStatus: db.serverStatus(),
            replSetStatus: rs.status(),
            hostInfo: db.hostInfo(),
            cmdLineOpts: db.adminCommand({getCmdLineOpts: 1})
        }, null, 2)" 2>/dev/null)

        # If the connection fails
        if [ -z "$json_data" ]; then
            echo -e "$host_port\t-\t-\t-\t-\t-\t-\t-\tDOWN"
            continue
        fi

        # Parsing JSON data with jq (or another tool)
        VERSION=$(echo "$json_data" | jq -r '.serverStatus.version // "N/A"')
        PROCESS=$(echo "$json_data" | jq -r '.serverStatus.process // "N/A"')
        HOST=$(echo "$json_data" | jq -r '.serverStatus.host // "N/A"')
        UPTIME_S=$(echo "$json_data" | jq -r '.serverStatus.uptime // 0')
        UPTIME_H=$(awk -v seconds=$UPTIME_S 'BEGIN{printf "%.2f", seconds/3600}')"h"

        IS_MASTER=$(echo "$json_data" | jq -r '.serverStatus.repl.ismaster // "false"')
        IS_SECONDARY=$(echo "$json_data" | jq -r '.serverStatus.repl.secondary // "false"')
        REPL_SET=$(echo "$json_data" | jq -r '.serverStatus.repl.setName // "STANDALONE"')
        DB_PATH=$(echo "$json_data" | jq -r '.cmdLineOpts.parsed.storage.dbPath // "N/A"')

        ROLE="-"
        if [ "$IS_MASTER" == "true" ]; then
            ROLE="PRIMARY"
        elif [ "$IS_SECONDARY" == "true" ]; then
            ROLE="SECONDARY"
        elif [ "$REPL_SET" != "STANDALONE" ]; then
            ROLE="OTHER"
        else
            ROLE="STANDALONE"
        fi

        echo -e "$host_port\t$VERSION\t$PROCESS\t$HOST\t$UPTIME_H\t$ROLE\t$REPL_SET\t$DB_PATH\tUP"
    done
) | column -t
}

# ------------------------------------------------------------------------------
# Description:
#   A wrapper to cleanly shut down a MongoDB server instance.
#
# Arguments:
#   $1 - The URI of the MongoDB instance to stop.
#
# Outputs:
#   - Writes status messages to stdout.
#   - Returns the exit code of the shutdown command.
# ------------------------------------------------------------------------------
mongo_stop() {
    local uri=$1
    if [ -z "$uri" ]; then
        error "Please specify an instance URI."
        return 1
    fi
    title "Shutting down instance $uri"
    mongosh "$uri/admin" --eval "db.shutdownServer()"
    return $?
}

# ------------------------------------------------------------------------------
# Description:
#   Lists the databases of a specific MongoDB instance.
#
# Arguments:
#   $1 - The URI of the MongoDB instance.
#
# Outputs:
#   - Writes the list of database names to stdout, one per line.
# ------------------------------------------------------------------------------
mongo_dbs() {
    local uri=$1
    if [ -z "$uri" ]; then
        error "Please specify an instance URI."
        return 1
    fi
    mongosh "$uri" --quiet --eval "db.getMongo().getDBNames().join('\n')"
}

# ------------------------------------------------------------------------------
# Description:
#   Lists the collections within a specific database on a MongoDB instance.
#
# Arguments:
#   $1 - The URI of the MongoDB instance.
#   $2 - The name of the database.
#
# Outputs:
#   - Writes the list of collection names to stdout, one per line.
# ------------------------------------------------------------------------------
mongo_collections() {
    local uri=$1
    local db=$2
    if [ -z "$uri" ] || [ -z "$db" ]; then
        error "Syntax: mongo_collections <uri> <database>"
        return 1
    fi
    mongosh "$uri/$db" --quiet --eval "db.getCollectionNames().join('\n')"
}

# ------------------------------------------------------------------------------
# Description:
#   Counts the documents in each collection of a given database and displays
#   the results in a table.
#
# Arguments:
#   $1 - The URI of the MongoDB instance.
#   $2 - The name of the database.
#
# Outputs:
#   - Writes a formatted table of collections and their document counts to stdout.
# ------------------------------------------------------------------------------
mongo_count_docs() {
(
    local uri=$1
    local db=$2
    if [ -z "$uri" ] || [ -z "$db" ]; then
        error "Syntax: mongo_count_docs <uri> <database>"
        return 1
    fi
    title "Counting documents in database '$db' on $uri"
    echo -e "COLLECTION\tNB_DOCUMENTS"
    for col in $(mongo_collections $uri $db); do
        count=$(mongosh "$uri/$db" --quiet --eval "db.getCollection('$col').countDocuments()")
        echo -e "$col\t$count"
    done
) | column -t
}

# ------------------------------------------------------------------------------
# Description:
#   Performs a logical backup of a database using `mongodump`. The output is
#   gzipped and then archived into a single .tar.gz file.
#
# Arguments:
#   $1 - The URI of the MongoDB instance.
#   $2 - The name of the database to back up.
#   $3 - (Optional) The target directory for the backup file. Defaults to "./backups".
#
# Outputs:
#   - Creates a .tar.gz backup file in the target directory.
#   - Writes progress and status messages to stdout.
#   - Returns 0 on success, non-zero on failure.
# ------------------------------------------------------------------------------
mongo_backup() {
    local uri=$1
    local db=$2
    local target_dir=${3:-"./backups"}
    local horodate=$(date "+%Y-%m-%d_%H-%M-%S")
    local backup_path="$target_dir/${db}_${horodate}"

    if [ -z "$uri" ] || [ -z "$db" ]; then
        error "Syntax: mongo_backup <uri> <database> [target_directory]"
        return 1
    fi

    mkdir -p "$target_dir"
    title "Backing up database '$db' from '$uri'"
    info "Destination: $backup_path"

    mongodump --uri="$uri" --db="$db" --out="$backup_path" --gzip
    local lRC=$?

    if [ $lRC -eq 0 ]; then
        ok "Backup completed successfully."
        info "Archive: ${backup_path}.tar.gz"
        # Create a tar.gz archive for easier handling
        (cd "$target_dir" && tar -czf "${db}_${horodate}.tar.gz" "${db}_${horodate}" && rm -rf "${db}_${horodate}")
    else
        error "Backup failed with return code $lRC."
    fi
    return $lRC
}

# ------------------------------------------------------------------------------
# Description:
#   Performs a logical restore of a database from a .tar.gz backup archive
#   created by `mongo_backup`. It drops the database before restoring.
#
# Arguments:
#   $1 - The URI of the destination MongoDB instance.
#   $2 - The path to the .tar.gz backup archive.
#
# Outputs:
#   - Restores the database on the target instance.
#   - Writes progress and status messages to stdout.
#   - Returns 0 on success, non-zero on failure.
# ------------------------------------------------------------------------------
mongo_restore() {
    local uri=$1
    local backup_archive=$2

    if [ -z "$uri" ] || [ -z "$backup_archive" ]; then
        error "Syntax: mongo_restore <destination_uri> <path_to_tar_gz_archive>"
        return 1
    fi

    if [ ! -f "$backup_archive" ]; then
        error "Backup file '$backup_archive' does not exist."
        return 1
    fi

    local temp_dir=$(mktemp -d)
    info "Extracting archive $backup_archive to $temp_dir"
    tar -xzf "$backup_archive" -C "$temp_dir"

    # The restore path is the directory created inside temp_dir
    local restore_path=$(find "$temp_dir" -mindepth 1 -maxdepth 1 -type d)

    title "Restoring to '$uri' from '$backup_archive'"
    mongorestore --uri="$uri" --drop --gzip "$restore_path"
    local lRC=$?

    if [ $lRC -eq 0 ]; then
        ok "Restore completed successfully."
    else
        error "Restore failed with return code $lRC."
    fi

    info "Cleaning up temporary directory..."
    rm -rf "$temp_dir"
    return $lRC
}


# ------------------------------------------------------------------------------
# Description:
#   Displays currently active operations (queries, updates, etc.) on a
#   MongoDB instance.
#
# Arguments:
#   $1 - The URI of the MongoDB instance.
#
# Outputs:
#   - Writes a JSON object for each active operation to stdout.
# ------------------------------------------------------------------------------
mongo_active_ops() {
    local uri=$1
    if [ -z "$uri" ]; then
        error "Please specify an instance URI."
        return 1
    fi
    mongosh "$uri" --quiet --eval "db.currentOp(true).inprog.forEach(op => {
        if (op.op !== 'none') {
            printjson({
                opid: op.opid,
                op: op.op,
                ns: op.ns,
                secs_running: op.secs_running,
                client: op.client,
                query: op.query,
                msg: op.msg
            });
        }
    })"
}

# ------------------------------------------------------------------------------
# Description:
#   Displays the status of the replica set members for a given instance.
#   Requires `jq` for robust JSON parsing.
#
# Arguments:
#   $1 - The URI of a MongoDB instance in the replica set.
#
# Outputs:
#   - Writes a formatted table of replica set member statuses to stdout.
# ------------------------------------------------------------------------------
mongo_replset_status() {
(
    local uri=$1
    if [ -z "$uri" ]; then
        error "Please specify an instance URI."
        return 1
    fi

    echo -e "HOST\tID\tSTATE\tUPTIME\tPING_MS\tHEALTH\tLAST_HEARTBEAT"
    # Using jq for robust parsing
    mongosh "$uri" --quiet --eval "JSON.stringify(rs.status())" | jq -r '.members[] | [
        .name,
        ._id,
        .stateStr,
        .uptime,
        .pingMs,
        .health,
        .lastHeartbeatRecv
    ] | @tsv' 2>/dev/null
) | column -t
}

# ------------------------------------------------------------------------------
# Description:
#   Creates a new user in a specific database with given roles.
#
# Arguments:
#   $1 - The URI of the MongoDB instance.
#   $2 - The database where the user will be created.
#   $3 - The username for the new user.
#   $4 - The password for the new user.
#   $5 - (Optional) Comma-separated list of roles (e.g., "readWrite,dbAdmin"). Defaults to "readWrite".
#
# Outputs:
#   - Writes status messages to stdout.
#   - Returns 0 on success, non-zero on failure.
# ------------------------------------------------------------------------------
mongo_create_user() {
    local uri=$1
    local db=$2
    local user=$3
    local pass=$4
    local roles=${5:-"readWrite"} # Ex: "readWrite,dbAdmin"

    if [ -z "$uri" ] || [ -z "$db" ] || [ -z "$user" ] || [ -z "$pass" ]; then
        error "Syntax: mongo_create_user <uri> <database> <user> <password> [roles_comma_separated]"
        return 1
    fi

    # Format roles for JSON
    local roles_json=$(echo "$roles" | awk -F, '{
        for (i=1; i<=NF; i++) {
            printf "{ \"role\": \"%s\", \"db\": \"%s\" }", $i, db
            if (i<NF) printf ","
        }
    }')

    title "Creating user '$user' on database '$db'"
    mongosh "$uri/$db" --quiet --eval "
        db.createUser({
            user: '$user',
            pwd: '$pass',
            roles: [ $roles_json ]
        })
    "
    local lRC=$?
    if [ $lRC -eq 0 ]; then
        ok "User '$user' created successfully."
    else
        error "Failed to create user '$user'."
    fi
    return $lRC
}

# ------------------------------------------------------------------------------
# Description:
#   Drops (deletes) a user from a specific database.
#
# Arguments:
#   $1 - The URI of the MongoDB instance.
#   $2 - The database from which to drop the user.
#   $3 - The username to drop.
#
# Outputs:
#   - Writes status messages to stdout.
#   - Returns 0 on success, non-zero on failure.
# ------------------------------------------------------------------------------
mongo_drop_user() {
    local uri=$1
    local db=$2
    local user=$3

    if [ -z "$uri" ] || [ -z "$db" ] || [ -z "$user" ]; then
        error "Syntax: mongo_drop_user <uri> <database> <user>"
        return 1
    fi

    title "Dropping user '$user' from database '$db'"
    mongosh "$uri/$db" --quiet --eval "db.dropUser('$user')"
    local lRC=$?
    if [ $lRC -eq 0 ]; then
        ok "User '$user' dropped successfully."
    else
        error "Failed to drop user '$user'."
    fi
    return $lRC
}

info "MongoDB utility script loaded."
info "Available commands: mongo_status, mongo_info, mongo_dbs, mongo_collections, etc."

# --- End of Script ---